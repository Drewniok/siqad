#!/bin/bash

################################################################################
#                                                                              #
#                                  IMPORTANT                                   #
#                                                                              #
# This script is intended for developers to create quick builds, default       #
# parameters all reflect this purpose. Please refrain from using this script   #
# before reading through and understanding this script.                        #
#                                                                              #
################################################################################

# Accepted input arguments:
# release/debug:    optional, indicate 'release' or 'debug' to build that
#                   version. This is ignored when building for WIN32, in that 
#                   case 'release' is always used.
# notest:           optional, skip SiQAD unit tests

# Accepted ENV variables:
# FOR_OS:           win64 or win32 for cross compilation
# QMAKE_COMMAND:    qmake binary path, mostly intended for cross compilation
# CMAKE_COMMAND:    cmake binary path, mostly intended for cross compilation
# APPEND_TO_PATH:   additional paths that should be appended to PATH, intended 
#                   for cross compilation. If FOR_OS==win64 and APPEND_TO_PATH 
#                   is empty, this script automatically adds /opt/mxe/usr/bin to 
#                   APPEND_TO_PATH if it exists.. Set an empty APPEND_TO_PATH 
#                   that is not desired.
# CMAKE_FLAGS:      cmake flags


set -e

#swig=false
build_type="Debug"
install_prefix="debug"
skip_tests=false
for arg in "$@"; do
    case "$arg" in
        #("--swig")  swig=true ;;
        ("release") build_type="Release"; install_prefix="release" ;;
        ("debug")   build_type="Debug"; install_prefix="debug" ;;
        ("notest")  skip_tests=true ;;
    esac
done

# Determine number of physical cores to use for compilation
cpu_cores=$(grep "^core id" /proc/cpuinfo | sort -u | wc -l)
multicore_compile="-j $cpu_cores"

proj_root=$(cd `dirname $0` && pwd)

if [ "$FOR_OS" == "win64" ]; then
    build_dir="${proj_root}/build-x64"
elif [ "$FOR_OS" == "win32" ]; then
    build_dir="${proj_root}/build-i686"
else
    build_dir="${proj_root}/build"
fi

# Path to Breeze Qt icon theme for cross-compilation
# An example is to clone https://github.com/KDE/breeze-icons and point the following variable to the icons directory.
#qt_theme_path=$HOME/global/siqad-cross-compilation-resources/breeze-icons/icons

if [ ! -z ${APPEND_TO_PATH} ]; then
    export PATH="$PATH:$APPEND_TO_PATH"
elif [[ "$FOR_OS" == "win64" ]] || [[ "$FOR_OS" == "win32" ]]; then
    MXE_PATH=/opt/mxe/usr/bin
    if [ -d "${MXE_PATH}" ]; then
        export PATH="$PATH:$MXE_PATH"
    fi
fi


if [ "$FOR_OS" == "win64" ]; then
    if [ -z ${QMAKE_COMMAND} ]; then
        QMAKE_COMMAND=/opt/mxe/usr/bin/x86_64-w64-mingw32.static-qmake-qt5
    fi
    if [ -z ${CMAKE_COMMAND} ]; then
        CMAKE_COMMAND=/opt/mxe/usr/bin/x86_64-w64-mingw32.static-cmake
    fi
    if [ -z ${CMAKE_FLAGS} ]; then
        CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DWIN32_QMAKE_BIN=${QMAKE_COMMAND} -DWIN32_MAKE_BIN=make"
    fi
elif [ "$FOR_OS" == "win32" ]; then
    if [ -z ${QMAKE_COMMAND} ]; then
        QMAKE_COMMAND=/opt/mxe/usr/bin/i686-w64-mingw32.static-qmake-qt5
    fi
    if [ -z ${CMAKE_COMMAND} ]; then
        CMAKE_COMMAND=/opt/mxe/usr/bin/i686-w64-mingw32.static-cmake
    fi
    if [ -z ${CMAKE_FLAGS} ]; then
        CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=release -DWIN32_QMAKE_BIN=${QMAKE_COMMAND} -DWIN32_MAKE_BIN=make"
    fi
else
    if [ -z ${CMAKE_COMMAND} ]; then
        CMAKE_COMMAND=cmake
    fi
    if [ -z ${CMAKE_FLAGS} ]; then
        CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=$build_type -DCMAKE_INSTALL_PREFIX=$install_prefix"
    fi
fi

if [ $skip_tests == true ]; then
    echo "Skip SiQAD tests."
    CMAKE_FLAGS+=" -DSKIP_SIQAD_TESTS=TRUE"
fi

echo "Project root:"
echo ${proj_root}

echo "CMake directory:"
echo ${build_dir}

# Make and install SiQADConn via scikit and SWIG
# NOTE this is now integrated into the normal CMake routine
#if [[ $swig == true ]] && [[ "$FOR_OS" != "win64" ]]; then
#    echo "Building SWIG SiQADConnector at central location..."
#    cd "${proj_root}/libs/siqadconn"
#    ./swig_compile_and_install
#fi

# use cmake to create Makefiles for the project
mkdir -p "${build_dir}"
cd "${build_dir}"
echo "Running cmake..."
${CMAKE_COMMAND} ${CMAKE_FLAGS} ..

# compile
echo "Building everything..."
make $multicore_compile
make install
